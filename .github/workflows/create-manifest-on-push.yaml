# This workflow is used to update the kubernetes secret manifest on hello-cloudbuilder-iac. 
# The trigger to run would be:
# - There is an push to main
# - The push contains a change logstash pipeline file

name: Update Pipeline Secret Manifest 
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'logstash/pipeline/**'


env:
  APP_CHECKOUT_PATH: 'local' # Where to checkout the application repo
  IAC_COMMIT_BRANCH: 'candidate' # Branch to use for IAC repo changes
  IAC_CHECKOUT_PATH: 'iac' # Where to checkout the IAC repo
  IAC_PATH: 'elk/logstash/kustomize' # Path in IAC repo for logstash manifests

jobs:
  run-pipeline-tests:
    runs-on: ubuntu-latest 
    # This job is a placeholder for running pipeline tests (currently only checks out code)
    steps:
        - uses: actions/checkout@v4 # Checks out the repository code

  push-pipeline-to-iac:
    runs-on: ubuntu-latest
    # This job handles updating the IAC repo with new pipeline manifests
    steps:
      - name: Install Applications
        shell: bash
        if: ${{ env.ACT && runner.os == 'Linux' }}
        # Installs basic utilities (tree) if running in ACT (local GitHub Actions runner)
        run: |
          sudo apt update \
          && sudo apt-get update \
          && sudo apt-get install -y tree 

      - name: Install kubectl
        shell: bash
        if: ${{ env.ACT && runner.os == 'Linux' }}
        # Installs kubectl if running in ACT (local GitHub Actions runner)
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
            && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg \
            && sudo mkdir -p -m 755 /etc/apt/keyrings \
            && curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg \
            && sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg \
            && echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list \
            && sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list \
            && sudo apt-get update \
            && sudo apt-get install -y kubectl 

      - name: Install GitHub CLI
        shell: bash
        if: ${{ env.ACT && runner.os == 'Linux' }}
        # Installs GitHub CLI if running in ACT (local GitHub Actions runner)
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
            && sudo mkdir -p -m 755 /etc/apt/keyrings \
            && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
            && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
            && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y

      - id: checkout
        name: Clone to ${{ env.APP_CHECKOUT_PATH }}
        uses: actions/checkout@v4
        # Checks out the application repository to the specified path

        with:
          path: ${{ env.APP_CHECKOUT_PATH }}

      - name: Get changed pipeline files
        id: changed-files
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46
        # Finds which pipeline files have changed in this push
        with:
          path: ${{ env.APP_CHECKOUT_PATH }}
          dir_names: true
          files: |
            logstash/pipeline/**

      - name: debug
        # Prints out the list of all changed files for debugging purposes
        run: |
          echo "All changed files: ${{ steps.changed-files.outputs.all_changed_files }}"

      - id: clone-iac
        name: Clone iac to ${{ env.IAC_CHECKOUT_PATH }}
        uses: actions/checkout@v4
        # Checks out the IAC repository to the specified path using a deploy key
        with:
          ssh-key: ${{ secrets.IAC_KEY }}
          repository: ${{ vars.IAC_REPO }}
          path: ${{ env.IAC_CHECKOUT_PATH }}

      - name: Ensure Candidate Branch Exists
        # Makes sure the candidate branch exists in the IAC repo, creates it if not
        run: |
          cd ${{ env.IAC_CHECKOUT_PATH }}
          git fetch origin ${{ env.IAC_COMMIT_BRANCH }} || true
          git checkout ${{ env.IAC_COMMIT_BRANCH }} 2>/dev/null || git checkout -b ${{ env.IAC_COMMIT_BRANCH }}
  
      - name: Show tree
        # Shows the directory tree for debugging/inspection
        run: |
          tree

      - name: cat pipeline files and create manifest
        id: cat-pipeline-files
        # Concatenates all files in each changed pipeline folder into a single pipeline.conf file in the IAC repo
        # Each pipeline.conf file is then used to create a Kubernetes secret manifest
        run: |
          echo "Started to creating pipeline files"
          for folder in ${{ steps.changed-files.outputs.all_changed_files }}; do
            PIPELINE_TYPE=$(basename "$folder") # Extracts the pipeline type from the folder name (e.g. "debug_logs", "query_logs", "metrics")
            PIPELINE_DIRECTORY_PATH="${{ env.APP_CHECKOUT_PATH }}/${folder}"
            OUTPUT_DIRECTORY_PATH="${{ env.IAC_CHECKOUT_PATH }}/${{ env.IAC_PATH }}/${PIPELINE_TYPE}"
            echo "Creating pipeline.conf for $PIPELINE_TYPE"
            cat ${PIPELINE_DIRECTORY_PATH}/* > "${OUTPUT_DIRECTORY_PATH}/pipeline.conf"
            echo "Created pipeline.conf for $PIPELINE_TYPE"
            echo "Creating secret manifests for $PIPELINE_TYPE"
            SECRET_NAME="logstash-pipeline-${PIPELINE_TYPE//_/-}" # Replaces underscores with dashes for Kubernetes secret name
          cat << EOF > "${OUTPUT_DIRECTORY_PATH}/pipelines.yml"
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${SECRET_NAME}
          type: Opaque
          stringData:
            pipelines.yml: |-
              - pipeline.id: main
                config.string: |
          $(sed 's/^/        /' "${OUTPUT_DIRECTORY_PATH}/pipeline.conf")
          EOF
            echo "Created pipelines.yml for $PIPELINE_TYPE"
          done

      - name: Check for Changes
        id: check-diff
        # Checks if there are any changes in the IAC repo after updating pipeline.conf files
        run: |
          cd ${{ env.IAC_CHECKOUT_PATH }}
          echo "Git changes in ${{ env.IAC_CHECKOUT_PATH }}: $(git status --porcelain)"
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes detected in the manifest files."
            echo "Changed files: $(git status --porcelain)"
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in the manifest files."
            echo "Skipping commit and push."
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push
        if: steps.check-diff.outputs.changes == 'true'
        # If there are changes, commit and push them to the candidate branch of the IAC repo
        run: |
          cd ${{ env.IAC_CHECKOUT_PATH }}
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add ${{ env.IAC_PATH }}/
          git commit -m "Update manifests" \
            -m "Application Sha ${{ github.sha }}" \
            -m "Changed Pipeline files ${{ steps.changed-files.outputs.all_changed_files }}" 
          git push origin ${{ env.IAC_COMMIT_BRANCH}}

